# Deploy Next.js site to Cloudways
name: Deploy Next.js site to Cloudways

on:
  push:
    branches: [ main ]      # run on every push to main
  workflow_dispatch:        # allow manual run from Actions tab

permissions:
  contents: read

concurrency:
  group: cloudways-deploy
  cancel-in-progress: false

jobs:
  #########################################################################
  # 1) BUILD on GitHub runner
  #########################################################################
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No package manager lockfile found" && exit 1
          fi

      - name: Setup pnpm (if needed)
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js app
        run: ${{ steps.detect-package-manager.outputs.runner }} build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_TINA_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_TINA_CLIENT_ID }}
          NEXT_PUBLIC_TINA_BRANCH:   ${{ github.ref_name }}
          TINA_TOKEN:                ${{ secrets.TINA_TOKEN }}

  #########################################################################
  # 2) DEPLOY to Cloudways via rsync and restart via pm2
  #########################################################################
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass and rsync
        run: sudo apt-get update -y && sudo apt-get install -y sshpass rsync

      - name: Upload full build to Cloudways
        env:
          SSHPASS: ${{ secrets.CLOUDWAYS_PASSWORD }}
        run: |
          rsync -avz --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.github' \
            --exclude '.env*' \
            --exclude 'README.md' \
            --no-perms --omit-dir-times \
            -e "sshpass -e ssh -o StrictHostKeyChecking=no -p 22" \
            ./ \
            ${{ secrets.CLOUDWAYS_USERNAME }}@${{ secrets.CLOUDWAYS_HOST }}:/home/master/applications/letterbox/public_html/

      - name: Reload PM2 on Cloudways
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USERNAME }}
          password: ${{ secrets.CLOUDWAYS_PASSWORD }}
          port: 22
          script: |
            export NVM_DIR=~/.nvm
            source $NVM_DIR/nvm.sh
            nvm use 18
            cd /home/master/applications/letterbox/public_html
            git config --global --add safe.directory $(pwd)
            pm2 reload tina-app || pm2 start npm --name "tina-app" -- start
            pm2 save
