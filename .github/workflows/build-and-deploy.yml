# Deploy Next.js site to Cloudways
name: Deploy Next.js site to Cloudways

on:
  push:
    branches: [ main ]      # run on every push to main
  workflow_dispatch:        # allow manual run from Actions tab

permissions:
  contents: read

concurrency:
  group: cloudways-deploy
  cancel-in-progress: false

###############################################################################
#                              J O B S                                        #
###############################################################################
jobs:
  #########################################################################
  # 1) BUILD on GitHub runner
  #########################################################################
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Detect package manager
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn"  >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn"   >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm"  >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpm"   >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm"   >> $GITHUB_OUTPUT
            echo "command=ci"    >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "❌ No package manager lockfile found" && exit 1
          fi

      # pnpm setup (only if using pnpm)
      - name: Setup pnpm
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      # Install deps
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      # Build
      - name: Build Next.js app
        run: ${{ steps.detect-package-manager.outputs.runner }} build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_TINA_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_TINA_CLIENT_ID }}
          NEXT_PUBLIC_TINA_BRANCH:   ${{ github.ref_name }}
          TINA_TOKEN:                ${{ secrets.TINA_TOKEN }}

  #########################################################################
  # 2) DEPLOY: rsync build → Cloudways, then PM2 reload
  #########################################################################
  deploy:
    runs-on: ubuntu-latest
    needs: build            # only run if build succeeded
    env:
      DIST_DIR: dist        # local staging dir to upload

    steps:
      # Checkout so we can copy build artefacts
      - uses: actions/checkout@v4

      # Copy only runtime files into $DIST_DIR
      - name: Copy production build into $DIST_DIR
        run: |
          rm -rf "$DIST_DIR" && mkdir "$DIST_DIR"
          cp -R .next public package.json pnpm-lock.yaml "$DIST_DIR"/
          # include Tina admin bundle if it exists
          if [ -d public/admin ]; then
            mkdir -p "$DIST_DIR/public"
            cp -R public/admin "$DIST_DIR/public/"
          fi

      # Install rsync + sshpass
      - name: Install sshpass & rsync
        run: sudo apt-get update -y && sudo apt-get install -y sshpass rsync

      # Upload build to Cloudways
      - name: Upload build to Cloudways
        env:
          SSHPASS: ${{ secrets.CLOUDWAYS_PASSWORD }}
        run: |
          rsync -avz --delete \
            -e "sshpass -e ssh -o StrictHostKeyChecking=no -p 22" \
            "$DIST_DIR"/ \
            ${{ secrets.CLOUDWAYS_USERNAME }}@${{ secrets.CLOUDWAYS_HOST }}:/home/master/applications/letterbox/public_html/

      # PM2 reload
      - name: Reload PM2 on Cloudways
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USERNAME }}
          password: ${{ secrets.CLOUDWAYS_PASSWORD }}
          port: 22
          script: |
            cd /home/master/applications/letterbox/public_html
            pm2 reload tina-app || pm2 start npm --name "tina-app" -- start
            pm2 save
